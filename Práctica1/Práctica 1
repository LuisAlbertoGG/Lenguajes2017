#lang plai

;5 - Inversión de números

(define (invierte n)
 (define (loop num reversa)
    (cond
      [(zero? num) reversa]
      [(let ((ultimo (modulo num 10)))
         (loop (/ (- num ultimo) 10) (+ (* reversa 10) ultimo)))]))
   (loop n 0))
   
;6 - Eliminar duplicados

(define (elimina-dup l)
  (cond
    [(empty? l) '()]
    [(empty? (cdr l)) (car l)]
    [(equal? (first l) (second l)) (elimina-dup (cdr l))]
    [else (cons (car l) (elimina-dup (cdr l)))]))


;7 a
(define (bin a)
  (cond
    [(< a 2) (number->string a)]
    [else (string-append(bin(quotient a 2)) (number->string (modulo a 2)))]
        ))


(define (binarios l)
  (cond
    [(empty? l) '()]
    [else (cons (bin (car l)) (binarios (cdr l)))]
        ))
;7 b
(define (primo a b)
  (cond
    [(> 2 a) null]
    [(> 2 b) a]
    [(= (modulo a b) 0) null]
    [else (primo a (- b 1))]
    ))

(define (primos l)
  (cond
    [(empty? l) null]
    [else (remove '() (cons (primo (car l) (- (car l) 1)) (primos (cdr l))))]
    ))
;7 c
(define (reversar l)
  (cond
    [(empty? l) '()]
    [(foldr cons (list(car l)) (reversar(cdr l)))]
    ))

(define (reversal l)
  (cond
    [(empty? l) '()]
    [(foldl cons '() l)]
    ))
;8a no la terminé
(define (concatena l m)
  (cond
    [(empty? m) m]
    [else (concatena (cons l (list (car m))) (cdr m))]
    ))

;9 a
(letrec ([ mayor ( lambda ( n m )
                   ( if ( < n m) m
                        n))])
  (mayor 1834 1729))


;9 b

(letrec ([ sumas ( lambda ( n )
                   ( if ( < n 2) 1
                        (+ n ( sumas (- n 1)))))])
  (sumas 100))
